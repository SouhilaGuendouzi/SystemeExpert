#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Feb 27, 2021 01:13:56 AM CET  platform: Linux

import sys
from DécouvrirType import *
import Pmw

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import interface_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    interface_support.set_Tk_var()
    top = Toplevel1 (root)
    interface_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    interface_support.set_Tk_var()
    top = Toplevel1 (w)
    interface_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1366x709+0+31")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1,  1)
        top.title("Systeme Expert")
        self.possibilite_chainage = [
            "chainage avant",
            "chainage arrière",
            "chainage avant, base fait"
        ]
        self.c = DécouvrirType("fichier.txt", "baseFait.txt")
        self.BaseConnaisanceB = self.c.Découvrir()
        self.ch=chainage(self.BaseConnaisanceB)

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.0, rely=-0.01, relheight=0.504, relwidth=1.005)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")

        self.Labelframe_basefait = tk.LabelFrame(self.Frame1)
        self.Labelframe_basefait.place(relx=0.335, rely=0.028, relheight=0.944
                , relwidth=0.336)
        self.Labelframe_basefait.configure(relief='groove')
        self.Labelframe_basefait.configure(text='''Base Fait Initial''')

        self.Text_basefait = tk.Text(self.Labelframe_basefait)
        self.Text_basefait.place(relx=0.043, rely=0.089, relheight=0.843
                , relwidth=0.924, bordermode='ignore')
        self.Text_basefait.configure(background="white")
        self.Text_basefait.configure(font="TkTextFont")
        self.Text_basefait.configure(selectbackground="blue")
        self.Text_basefait.configure(selectforeground="white")
        self.Text_basefait.configure(wrap="word")
        self.Text_basefait.configure(state="disabled")


        self.Labelframe_regles = tk.LabelFrame(self.Frame1)
        self.Labelframe_regles.place(relx=0.007, rely=0.028, relheight=0.944
                , relwidth=0.328)
        self.Labelframe_regles.configure(relief='groove')
        self.Labelframe_regles.configure(text='''Règles''')

        self.Text_regles = tk.Text(self.Labelframe_regles)
        self.Text_regles.place(relx=0.044, rely=0.089, relheight=0.843
                , relwidth=0.902, bordermode='ignore')
        self.Text_regles.configure(background="white")
        self.Text_regles.configure(font="TkTextFont")
        self.Text_regles.configure(selectbackground="blue")
        self.Text_regles.configure(selectforeground="white")
        self.Text_regles.configure(wrap="word")
        self.Text_regles.configure(state="disabled")


        self.Labelframe_fichiers = tk.LabelFrame(self.Frame1)
        self.Labelframe_fichiers.place(relx=0.677, rely=0.028, relheight=0.944
                , relwidth=0.315)
        self.Labelframe_fichiers.configure(relief='groove')
        self.Labelframe_fichiers.configure(text='''Fichiers''')

        self.Entry_file1 = tk.Entry(self.Labelframe_fichiers)
        self.Entry_file1.place(relx=0.116, rely=0.178, height=33, relwidth=0.569
                , bordermode='ignore')
        self.Entry_file1.configure(background="white")
        self.Entry_file1.configure(font="TkFixedFont")
        self.Entry_file1.insert(tk.INSERT, "fichier.txt")


        self.Entry_file2 = tk.Entry(self.Labelframe_fichiers)
        self.Entry_file2.place(relx=0.116, rely=0.415, height=33, relwidth=0.569
                , bordermode='ignore')
        self.Entry_file2.configure(background="white")
        self.Entry_file2.configure(font="TkFixedFont")
        self.Entry_file2.insert(tk.INSERT, "baseFait.txt")


        self.Button_charger = tk.Button(self.Labelframe_fichiers)
        self.Button_charger.place(relx=0.185, rely=0.712, height=31, width=191
                , bordermode='ignore')
        self.Button_charger.configure(text='''Charger fichiers''')
        self.Button_charger.configure(command=self.bouton_chargement_txt)

        

        self.Label_regles = tk.Label(self.Labelframe_fichiers)
        self.Label_regles.place(relx=0.116, rely=0.119, height=21, width=49
                , bordermode='ignore')
        self.Label_regles.configure(text='''Règles''')

        self.Label_basefait = tk.Label(self.Labelframe_fichiers)
        self.Label_basefait.place(relx=0.116, rely=0.356, height=21, width=69
                , bordermode='ignore')
        self.Label_basefait.configure(text='''Base Fait''')


        self.Labelframe_chainage = tk.LabelFrame(top)
        self.Labelframe_chainage.place(relx=0.681, rely=0.494, relheight=0.42
                , relwidth=0.316)
        self.Labelframe_chainage.configure(relief='groove')
        self.Labelframe_chainage.configure(text='''Chainage''')

        self.Button_lancer = tk.Button(self.Labelframe_chainage)
        self.Button_lancer.place(relx=0.417, rely=0.772, height=31, width=71
                , bordermode='ignore')
        self.Button_lancer.configure(text='''Lancer''')
        self.Button_lancer.configure(command=self.bouton_lancement_chainage)


        self.Entry_but = tk.Entry(self.Labelframe_chainage)
        self.Entry_but.place(relx=0.116, rely=0.57, height=33, relwidth=0.384
                , bordermode='ignore')
        self.Entry_but.configure(background="white")
        self.Entry_but.configure(font="TkFixedFont")

        self.Label_but = tk.Label(self.Labelframe_chainage)
        self.Label_but.place(relx=0.116, rely=0.503, height=21, width=29
                , bordermode='ignore')
        self.Label_but.configure(text='''But''')

        self.combo_chaine = Pmw.ComboBox(self.Labelframe_chainage, scrolledlist_items = self.possibilite_chainage)
        self.combo_chaine.place(relx=0.116, rely=0.364, relwidth=0.433, bordermode='ignore')

        self.Label_typechainage = tk.Label(self.Labelframe_chainage)
        self.Label_typechainage.place(relx=0.116, rely=0.201, height=21, width=99
                , bordermode='ignore')
        self.Label_typechainage.configure(text='''Type chainage''')

        self.Labelframe_resultat = tk.LabelFrame(top)
        self.Labelframe_resultat.place(relx=0.007, rely=0.494, relheight=0.489
                , relwidth=0.667)
        self.Labelframe_resultat.configure(relief='groove')
        self.Labelframe_resultat.configure(text='''Résultat''')

        self.Text_result = tk.Text(self.Labelframe_resultat)
        self.Text_result.place(relx=0.022, rely=0.086, relheight=0.876
                , relwidth=0.467, bordermode='ignore')
        self.Text_result.configure(background="white")
        self.Text_result.configure(font="TkTextFont")
        self.Text_result.configure(selectbackground="blue")
        self.Text_result.configure(selectforeground="white")
        self.Text_result.configure(wrap="word")
        self.Text_result.configure(state="disabled")


        self.Text_resultfait = tk.Text(self.Labelframe_resultat)
        self.Text_resultfait.place(relx=0.505, rely=0.086, relheight=0.876
                , relwidth=0.479, bordermode='ignore')
        self.Text_resultfait.configure(background="white")
        self.Text_resultfait.configure(font="TkTextFont")
        self.Text_resultfait.configure(selectbackground="blue")
        self.Text_resultfait.configure(selectforeground="white")
        self.Text_resultfait.configure(wrap="word")
        self.Text_resultfait.configure(state="disabled")


        self.Button_quitter = tk.Button(top)
        self.Button_quitter.place(relx=0.937, rely=0.931, height=31, width=71)
        self.Button_quitter.configure(text='''Quitter''')
        self.Button_quitter.configure(command=root.quit)

    def bouton_lancement_chainage(self):
            self.del_text(self.Text_result)
            self.del_text(self.Text_resultfait)
            but = str(self.Entry_but.get())

            if self.combo_chaine.get() == self.possibilite_chainage[0]:
                    self.c = DécouvrirType("fichier.txt", "baseFait.txt")
                    self.BaseConnaisanceB = self.c.Découvrir()
                    self.ch=chainage(self.BaseConnaisanceB)
                    string = self.ch.chainage_avant(but)
                    self.set_text(self.Text_result, str(string))
                    string = ""
                    for i, f in enumerate(self.BaseConnaisanceB.BaseFait):
                            string += "Fait " + str(i) + "\t" + str(f) + "\n\n"
                    self.set_text(self.Text_resultfait, str(string))
                    self.BaseConnaisanceB.BaseFait = self.Entry_file2.get()

            elif self.combo_chaine.get() == self.possibilite_chainage[1]:
                    self.c = DécouvrirType("fichier.txt", "baseFait.txt")
                    self.BaseConnaisanceB = self.c.Découvrir()
                    self.ch=chainage(self.BaseConnaisanceB)
                    string = self.ch.chainage_arrière(but)
                    self.set_text(self.Text_result, str(string))
                    string = ""
                    for i, f in enumerate(self.BaseConnaisanceB.BaseFait):
                            string += "Fait " + str(i) + "\t" + str(f) + "\n\n"
                    self.set_text(self.Text_resultfait, str(string))
                    self.BaseConnaisanceB.BaseFait = self.Entry_file2.get()

            elif self.combo_chaine.get() == self.possibilite_chainage[2]:
                    self.c = DécouvrirType("fichier.txt", "baseFait.txt")
                    self.BaseConnaisanceB = self.c.Découvrir()
                    self.ch=chainage(self.BaseConnaisanceB)
                    string = self.ch.chainage_avant_baseFait()
                    self.set_text(self.Text_result, str(string))
                    string = ""
                    for i, f in enumerate(self.BaseConnaisanceB.BaseFait):
                            string += "Fait " + str(i) + "\t" + str(f) + "\n\n"
                    self.set_text(self.Text_resultfait, str(string))
                    self.BaseConnaisanceB.BaseFait = self.Entry_file2.get()
            else:
                    self.set_text(self.Text_result,str("Veuillez choisir un type de chainage"))
                    self.set_text(self.Text_resultfait,str("Veuillez choisir un type de chainage"))
                    self.BaseConnaisanceB.BaseFait = self.Entry_file2.get()

    def set_text(self, zdt, text):
        zdt.configure(state="normal")
        zdt.insert(1.0, text)
        zdt.configure(state="normal")

    def del_text(self,zdt):
        zdt.configure(state="normal")
        zdt.delete(1.0, tk.END)
        zdt.configure(state="normal")

    def bouton_chargement_txt(self):
        self.Text_basefait.configure(state="normal")
        self.Text_basefait.delete(1.0, tk.END)
        self.Text_regles.configure(state="normal")
        self.Text_regles.delete(1.0, tk.END)
        self.c = DécouvrirType(self.Entry_file1.get(), self.Entry_file2.get())
        self.BaseConnaisanceB = self.c.Découvrir()

        string = ""
        for i, f in enumerate(self.BaseConnaisanceB.BaseFait):
            string += "Fait " + str(i) + "\t" + str(f) + "\n\n"
        self.Text_basefait.configure(state="normal")
        self.Text_basefait.insert(tk.INSERT, string)
        self.Text_basefait.configure(state="disabled")
        self.Text_regles.configure(state="normal")
        self.contenu = print_contenu(self.Entry_file1.get(), self.Entry_file2.get())
        self.Text_regles.insert(tk.INSERT, str(self.contenu.print_règles()))
        self.Text_regles.configure(state="disabled")

      


       

if __name__ == '__main__':
    vp_start_gui()





